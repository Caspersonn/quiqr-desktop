{{- $collectionPages := slice -}}
{{- $singlePages := slice -}}
{{- $singles := slice -}}
{{- $singlesMenu := slice -}}
{{- $collections := slice -}}
{{- $collectionMenu := slice -}}
{{- $homeMenu := slice -}}
{{- $dataMenu := slice -}}
{{- $generalMenu := slice -}}
{{- $configItems := dict "title" "string" "description" "string" -}}

{{/*------------------------------ Data -----------------------------*/}}


{{- range $index, $file := readDir "/" -}}
  {{- if eq $file "data" -}}
      {{- $data := (partial "createDataSingles" (dict "dir" "/data/" "data" $.Site.Data)) }}
      {{- $singles = $singles | append (index $data "singles") }}
      {{- $dataMenu = $dataMenu | append (index $data "menu") }}
  {{- end -}}
{{- end -}}

{{- define "partials/createDataSingles" -}}
      {{- $dir := .dir -}}
      {{- $data := .data -}}
      {{- $singles := slice -}}
      {{- $menu := slice -}}
      {{- range $index, $file := (partial "rangeFiles" (dict "dir" $dir )) -}}
            {{- if .file }}
                  {{- $fields := slice -}}
                  {{- $path := printf "%s%s" .dir .file -}}
                  {{- $fileName := index (split .file ".") 0 -}}
                  {{- $fileExt := index (split .file ".") 1 -}}
                  {{- $title := $fileName | humanize -}}
                  {{- $dataKey := printf "d_%s" $fileName -}}
                  {{- range $key, $value := (index $data $fileName) -}}
                      {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
                      {{- $fields = $fields | append $field -}}
                  {{- end -}}
                  {{- $single :=  dict "key" $dataKey "title" $title "file" $path "dataformat" $fileExt "fields" $fields "previewUrl" "/" -}}
                  {{- $singles = $singles | append $single -}}
                  {{- $menu = $menu | append (dict "key" (index $single "key")) -}}
            {{ else }}
                  {{- $data := partial "createDataSingles" (dict "dir" $file.dir "data" (index $data .node) ) -}}
                  {{- $singles = $singles | append (index $data "singles") -}}
                  {{- $menu = $menu | append (index $data "menu") -}}
            {{ end }}
      {{- end -}}
      {{- return (dict "singles" $singles "menu" $menu  )}}
{{- end -}}

{{/*------------------------------ Menus and Params  -----------------------------*/}}


{{- $configFilePath := partial "configFile" . -}}

{{- if in $configFilePath "config/_default/" }}
      {{- range $index, $file := partial "rangeFiles"  (dict "dir" "config/_default/" ) -}}
            {{- if in .file "params" -}}
                {{- $single := partial "createParams" (dict "file" .file  "dir" "config/_default/" "params" $.Site.Params) -}}
                {{- $singles = $singles | append $single -}}
                {{- $generalMenu = $generalMenu | append (dict "key" ( index $single "key" ) ) -}}
            {{- else if in .file "menu" -}}
                {{- $single := partial "createMenus" (dict "file" .file  "dir" "config/_default/" "menus" $.Site.Menus) -}}
                {{- $singles = $singles | append $single -}}
                {{- $generalMenu = $generalMenu | append (dict "key" "menus" ) -}}
            {{- end -}}
      {{- end -}}
{{- else -}}
      {{ $config := readFile $configFilePath  }}
      {{- if in $config "params" -}}
          {{- $single := partial "createParams" (dict "file" $configFilePath  "dir" "/" "params" $.Site.Params "configItems" $configItems) -}}
          {{- $singles = $singles | append $single -}}
          {{- $generalMenu = $generalMenu | append (dict "key" ( index $single "key" ) ) -}}
      {{- end -}}
{{- end -}}

{{- define "partials/createParams" -}}

    {{- $path := path.Join .dir .file -}}
    {{- $ext := index (split .file ".") 1 -}}
    {{- $name := index (split .file ".") 0 -}}
    {{- $fields := slice -}}
    {{- $single := dict -}}

    {{- if eq .dir "/" -}}

        {{- range $key, $value := .configItems -}}
              {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
              {{- $fields = $fields | append $field -}}
        {{- end -}}
        {{- $fields = $fields | append (partial "createField" (dict "key" "params" "value" .params )) -}}
        {{- $path = .file -}}
    {{- else -}}
        {{- range $key, $value := .params -}}
              {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
              {{- $fields = $fields | append $field -}}
        {{- end -}}
    {{- end -}}

    {{- $single = (dict "key" $name "title" $name "file" $path "dataformat" $ext "fields" $fields) -}}
    {{- return $single -}}
{{ end }}


{{- define "partials/createMenus" -}}
    {{- $path := path.Join .dir .file -}}
    {{- $ext := index (split .file ".") 1 -}}
    {{- $name := index (split .file ".") 0 -}}
    {{- $singles := slice -}}
    {{- $fields := slice -}}
    {{- range $menu, $items := .menus -}}
          {{- $standardMenu := slice (dict "name" "string" "url" "string" "weight" 1 "parent" "string" "identifier" "string") -}}
          {{- $fields = $fields | append (partial "createField" (dict "key" $menu "value" $standardMenu )) -}}
    {{- end -}}
    {{- $single := (dict "key" $name "title" $name "file" $path "dataformat" $ext "fields" $fields) -}}
    {{- return $single -}}
{{- end -}}


{{- define "partials/rangeMenu" -}}


{{- end -}}

{{/*------------------------ Home widgetpage ------------------------ */}}


{{- $page := "/home/index.md" -}}
{{- $homepage := site.GetPage $page -}}
{{- $homeSinglePages := slice -}}
{{- $homeCollections := dict -}}

{{- range $index, $st :=  ($homepage.Resources.ByType "page") -}}
  {{ if eq $st.File.Dir "home/" }}
    {{- $homeSinglePages = $homeSinglePages | append . -}}
  {{ else if eq (path.Dir (path.Dir $st.File.Dir)) "home" }}
    {{- $homeSinglePages = $homeSinglePages | append . -}}
  {{ else }}

    {{- $path :=  path.Dir (path.Dir $st.File.Dir) -}}
    {{- $pathDict := dict "page" $path }}

    {{- if ne (index $homeCollections "page") ($path) -}}
        {{- $homeCollections = $homeCollections | merge $pathDict -}}
        {{- $sectionKey := path.Base $path -}}
        {{- $sectionTitle :=  $sectionKey | humanize -}}
        {{- $itemTitle :=  ( $sectionKey | humanize) | singularize -}}
        {{- $dir := printf "content/%s/" $path -}}
        {{- $extension := .File.Ext -}}
        {{- $fields := slice -}}
        {{- $fields := $fields | append (partial "createField" (dict "value" .Content "key" "mainContent")) -}}
        {{- range $key, $value := .Params -}}
            {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
            {{- $fields = $fields | append $field -}}
        {{- end -}}
        {{- $collection := dict "key" $sectionKey "title" $sectionTitle "folder" $dir "extension" $extension "dataformat" "yaml" "fields" $fields "itemtitle" $itemTitle "previewUrl" "/" -}}
        {{- $collections = $collections | append $collection -}}
        {{- $homeMenu = $homeMenu | append (dict "key" (index $collection "key")) -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- range $homeSinglePages -}}
      {{- $single := (partial "createSingle" . ) -}}
      {{- $singles = $singles | append $single -}}
      {{- $homeMenu = $homeMenu | append (dict "key" (index $single "key")) -}}
{{- end -}}

{{/*------------------------Collections------------------------ */}}

{{- range where .Site.AllPages "Kind" "in" (slice "section" "taxonomy" ) -}}
    {{- $collectionPages = $collectionPages | append . -}}
{{- end -}}



{{- range $collectionPages -}}
      {{- $collection := (partial "createCollection" . ) -}}

      {{- if gt (len $collection) 0 }}
          {{- $collectionMenu = $collectionMenu | append (dict "key" (index $collection "key")) -}}
          {{- $collections = $collections | append $collection -}}
      {{- end -}}
{{- end -}}


{{/*---------------------------Singles----------------------------- */}}

{{- range .Site.Pages -}}
    {{- if and .IsHome .Path -}}
      {{- $singlePages = $singlePages | append . -}}
    {{- end -}}
{{- end -}}

{{- range (where .Pages "Kind" "not in" .RegularPagesRecursive) -}}
    {{- if .IsPage -}}
      {{- $singlePages = $singlePages | append . -}}
    {{- end -}}
{{- end -}}

{{- range $singlePages -}}
    {{- $single := (partial "createSingle" . ) -}}
    {{- if gt (len $single) 0 }}
        {{- $singles = $singles | append $single -}}
        {{- $singlesMenu = $singlesMenu | append (dict "key" (index $single "key")) -}}
    {{- end -}}
{{- end -}}

{{/*---------------------------Menu----------------------------- */}}
{{- $menu := slice -}}

{{- if gt (len $generalMenu) 0 }}
    {{- $menu = $menu | append (dict "key" "general" "title" "General settings" "menuItems" $generalMenu) -}}
{{- end -}}

{{- if gt (len $homeMenu) 0 }}
    {{- $menu = $menu | append (dict "key" "home" "title" "Home" "menuItems" $homeMenu) -}}
{{- end -}}

{{- if gt (len $singlesMenu) 0 }}
    {{- $menu = $menu | append (dict "key" "singles" "title" "Singles" "menuItems" $singlesMenu) -}}
{{- end -}}

{{- if gt (len $collectionMenu) 0 }}
    {{- $menu = $menu | append (dict "key" "collections" "title" "Collections" "menuItems" $collectionMenu) -}}
{{- end -}}

{{- if gt (len $dataMenu) 0 }}
    {{- $menu = $menu | append (dict "key" "data" "title" "Data" "menuItems" $dataMenu) -}}
{{- end -}}

{{/*-----------------The core getting it all together------------- */}}


{{- $hugover := printf "extended_%s" .Hugo.Version -}}
{{- $serve := slice (dict "key" "default" "config" (partial "configFile" .)) -}}
{{- $build := slice (dict "key" "default" "config" (partial "configFile" .)) -}}
{{- dict "hugover" $hugover "serve" $serve "build" $build "menu" $menu "singles" $singles "collections" $collections  | jsonify (dict "prefix" " " "indent" "  ") -}}



{{/*---------------------------Partials--------------------------- */}}

{{- define "partials/rangeFiles" -}}
    {{- $files := slice -}}
    {{- $fileDir := .dir -}}
    {{- range (readDir $fileDir ) -}}
         {{- if .IsDir -}}
              {{- $dir := printf "%s/" (printf "%s%s" $fileDir .Name ) -}}
              {{- $node :=  strings.TrimRight "." (replace (replace $dir "/data/" "") "/" ".") -}}
              {{- $files = $files | append (dict "dir" $dir "node" $node ) -}}
         {{- else -}}
              {{- $files = $files | append (dict "dir" $fileDir "file" .Name ) -}}
         {{- end -}}
    {{- end -}}
    {{- return $files -}}
{{- end -}}


{{- define "partials/configFile" -}}
    {{- $configFile := "" -}}
    {{- range readDir "/" -}}
      {{- if and (eq .Name "config") .IsDir -}}
            {{- range readDir "/config/_default" -}}
                {{- if in .Name "config"  -}}
                      {{ $configFile = printf "/config/_default/%s" .Name }}
                {{- end -}}
            {{- end -}}
      {{- else if in .Name "config" -}}
            {{ $configFile = .Name }}
      {{- end -}}
    {{- end -}}
    {{- return $configFile -}}
{{- end -}}

{{- define "partials/createKey"}}
    {{- if in (path.Base .File.Path) "index" -}}
        {{- if eq .File.Dir "/" -}}
            {{- .Name | anchorize -}}
        {{- else -}}
            {{- path.Split (path.Base .File.Dir )| anchorize -}}
        {{- end -}}
    {{- else -}}

        {{- if .File.TranslationBaseName -}}
          {{- if in .File.TranslationBaseName "index" -}}
            {{- path.Split (path.Base .File.Dir )| anchorize -}}
          {{- else -}}
            {{- .File.TranslationBaseName -}}
          {{- end -}}
        {{- else -}}
          {{-  (path.Base .Path)  -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{- define "partials/createSingle" -}}
    {{- $pageKey := printf "s_%s" (partial "createKey" . ) -}}
    {{- $pageTitle := "" -}}
    {{- if .IsSection -}}
      {{- $pageTitle = printf "%s listpage" ((partial "createKey" . )  | humanize) -}}
    {{- else -}}
      {{- $pageTitle = (partial "createKey" . )  | humanize -}}
    {{- end -}}

    {{- $path := .RelPermalink }}
    {{- $file := printf "content/%s" .File.Path -}}
    {{- $fields := slice -}}

    {{- $fields := $fields | append (partial "createField" (dict "value" .Content "key" "mainContent")) -}}

    {{- range $key, $value := .Params -}}
        {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
        {{- $fields = $fields | append $field -}}
    {{- end -}}

    {{- $previewUrl := "" -}}
    {{- if .RelPermalink  -}}
        {{- $previewUrl = .RelPermalink -}}
    {{- else }}
        {{- $previewUrl = "/" -}}
    {{- end -}}


    {{- $single :=  dict "key" $pageKey "title" $pageTitle "file" $file "dataformat" "yaml" "fields" $fields "previewUrl" $previewUrl -}}
    {{- return $single -}}
{{- end -}}

{{- define "partials/createCollection" -}}

    {{- $collection := "" -}}

    {{- $baseKey := (partial "createKey" . ) -}}
    {{- $sectionKey := printf "c_%s" $baseKey -}}
    {{- $sectionTitle :=  $baseKey| humanize -}}
    {{- $itemTitle :=  ( $baseKey | humanize) | singularize -}}
    {{- $break := false }}

    {{- range .Pages -}}

        {{- if and .File (ne $break "true") -}}
            {{- $break = true -}}
            {{- $dir := printf "content/%s/" $baseKey  -}}
            {{/* - $extension := .File.Ext - */}}
            {{- $extension := .File.Ext -}}
            {{- $fields := slice -}}

            {{- $fields := $fields | append (partial "createField" (dict "value" .Content "key" "mainContent")) -}}

            {{- range $key, $value := .Page.Params -}}
                {{- $field := partial "createField" (dict "key" $key "value" $value ) -}}
                {{- $fields = $fields | append $field -}}
            {{- end -}}
            {{- $collection =  dict "key" $sectionKey "title" $sectionTitle "folder" $dir "extension" $extension "dataformat" "yaml" "fields" $fields "itemtitle" $itemTitle  -}}
        {{- end -}}
    {{- end -}}
    {{- return $collection -}}
{{- end -}}


{{- define "partials/createField" -}}
    {{- $key := .key -}}
    {{- $value := .value -}}

    {{- $pogoType := partial "pogoType" (dict "value" $value "key" $key) -}}

    {{- $title := humanize $key -}}
    {{- $field := dict "key" $key "title" $title "type" $pogoType -}}

    {{- if (eq $pogoType "date") -}}
        {{- $field = merge $field (dict "default" "now") -}}
    {{- end -}}

    {{- if (eq $pogoType "section") -}}
        {{- $subfields := slice -}}
        {{- range $key, $value := $value -}}
                {{- $pogoType := partial "pogoType" (dict "value" $value "key" $key) -}}
                {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
                {{- $subfields = $subfields | append $field}}
        {{- end -}}
        {{- $field = merge $field (dict "groupdata" true "fields" $subfields) -}}
    {{- end -}}

    {{- if (eq $pogoType "accordion") -}}
        {{- $subfields := slice -}}
        {{- range $key, $value := ( index $value 0 ) -}}
                {{- $pogoType := partial "pogoType" (dict "value" $value "key" $key) -}}
                {{- $field := partial "createField" (dict "value" $value "key" $key) -}}
                {{ if or (eq $key "name") (eq $key "title")}}
                    {{- $field = $field | merge (dict "arrayTitle" true ) -}}
                {{- end -}}
                {{- $subfields = $subfields | append $field -}}
        {{- end -}}
        {{- $field = merge $field (dict "fields" $subfields ) -}}
    {{- end -}}

    {{- return $field -}}

{{- end -}}

{{- define "partials/pogoType" -}}
    {{- $value := .value -}}
    {{- $key := .key -}}
    {{- $pogoType := "" -}}
    {{- $type := (printf "%T" $value) -}}

    {{- if (eq "bool" $type) -}}
      {{- $pogoType = "boolean" -}}
    {{- else if (or (eq "int" $type) (eq "int64" $type) (eq "float64" $type)) -}}
      {{- $pogoType = "number" -}}
    {{- else if (eq "string" $type) -}}
      {{- $pogoType = "string" -}}
    {{- else if or ( eq "template.HTML" $type ) -}}
      {{- $pogoType = "markdown" -}}
    {{- else if (eq "time.Time" $type) -}}
      {{- if (eq $value "Lastmod") -}}
        {{- $pogoType = "info"}}
      {{- else -}}
        {{- $pogoType = "date"}}
      {{- end -}}
    {{- else if reflect.IsSlice $value -}}
      {{- if  reflect.IsMap ( index $value 0 ) -}}
          {{- $pogoType = "accordion" }}
      {{- else -}}
          {{- $pogoType = "chips" }}
      {{- end -}}
    {{- else if reflect.IsMap $value -}}
      {{- $pogoType = "section" -}}
    {{- else -}}
      {{- $pogoType = "hidden" -}}
    {{- end -}}

    {{- if or (eq $key "publishdate") (eq $key "lastmod") (eq $key "iscjklanguage") (eq $key "resources") (eq $key "previewUrl") -}}
        {{- $pogoType = "hidden" -}}
    {{- end -}}

    {{- if or (eq $key "publishdate") (eq $key "lastmod") (eq $key "iscjklanguage") (eq $key "resources") (eq $key "previewUrl") -}}
        {{- $pogoType = "hidden" -}}
    {{- end -}}

    {{- return $pogoType -}}
{{- end -}}
